################################################################################
# Purpose: Given the input file's tickers, we access Polygon's API to get each #
# tickers' data for a defined amount of time ("minute" or "day" can be used    #
# 
# NOTE: Whenever pulling data from an API and/or AWS, you should always        #
#       Attempt to get in and out of the server they are setting on ASAP.      #
#       Never, ever do any processing while getting data. Eventually, you will #
#       be charged.                                                            #
################################################################################

from polygon import RESTClient
import pandas as pd
from numpy import record
import datetime
import time
from config import stock_key

######################################################################################
# Showing the main routine you call doesn't need to be named 'main'.                 #
# This is one way your code can be self documennting. Also, place subroutines in the #
# order they are called.                                                             #
######################################################################################
def AccessPolygon():
    # INPUT
    tickers_df = pd.read_csv("resources/InputTickers.csv")
    #print(tickers_df.head())
    
    # OUTPUT
    output = open(f"resources/StockPrices.csv", "w")
    
    # HEADER RECORD
    record = f"Ticker,Date,Open,High,Low,Close,Volume,VolumeWeight,NumberOfTransactions,PercentageChange\n"
    output.write(record)

    # Used to eliminate "429 Client Error: Too Many Requests for url"
    record_count = 1  

    # iterating through input stocks
    for record, row in tickers_df.iterrows():
        ticker =  row['Ticker']
        get_stock_price(output, stock_key, ticker, time_span, from_, to)
        record_count = record_count + 1
        
        # prevents client error 429
        if record_count > 5: 
            print(f"Wait one minute before retrieving next five stocks.")
            time.sleep(90) # Sleep for 62 seconds
            record_count = 1
    
    output.close()

######################################################################################
# This is where the actual access to Polygon's API occurs.                           #
######################################################################################
def get_stock_price(output, client_key, ticker, time_span, from_, to):
    
    # print(f"get_stock_price: Retrieving {ticker} data.") 
    
    with RESTClient(client_key) as client:
        
        # for more information on calling this go to Polygon website
        resp = client.stocks_equities_aggregates(ticker, 1, time_span, from_, to, unadjusted=False)
        # print(f"get_stock_price: resp" + resp) 
        
        # write each resulting record to a file
        # TODO: Instead insert records to stock_API_data table    
        for result in resp.results:
            dt = ts_to_datetime(result["t"])
            record = f"{ticker},{dt},{result['o']},{result['h']},{result['l']},{result['c']},{result['v']}," \
                     f"{result['vw']},{result['n']}\n"
            output.write(record)

def ts_to_datetime(ts) -> str: 
    return datetime.datetime.fromtimestamp(ts / 1000.0).strftime('%Y-%m-%d')
    
# MAIN
if __name__ == '__main__':

    from_ = (datetime.datetime.now() - datetime.timedelta(days=729)).strftime('%Y-%m-%d')
    to = datetime.datetime.now().strftime('%Y-%m-%d')
    time_span = "day" # "minute"

    AccessPolygon()
    print("GetAllStocksData has completed.")
    print("Boooo-yaaaaahhhh!\n")
