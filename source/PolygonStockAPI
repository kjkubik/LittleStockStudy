###############################################################################
# Purpose: For each stock InputTickers, we:                                   #
#             1) create a csv file using stock's ticker                       #
#             2) create header record                                         #
#             3) access API to get all stock data we can from Polygon Stock   #
###############################################################################
from polygon import RESTClient
import pandas as pd
from numpy import record
import datetime

import time
#import GetSMA
from config import stock_key

def ts_to_datetime(ts) -> str: return datetime.datetime.fromtimestamp(ts / 1000.0).strftime('%Y-%m-%d')

# TODO: once user enters the begin date and the number of days they want to hold the stock, the number of days will change. 

perioDays = 1
period = days=perioDays

from_ = (datetime.datetime.now() - datetime.timedelta(period)).strftime('%Y-%m-%d') 
to = datetime.datetime.now().strftime('%Y-%m-%d')
time_span = "minute" # "day" # "minute"

def AccessPolygon():
    # INPUT tickers
    # tickers_df = pd.read_csv("resources/InputTickers.csv")

    # Used to eliminate "429 Client Error: Too Many Requests for url"
    record_count = 1 
    
    with open("resources/InputTickers.csv") as inputFile:
        
        lines = [line.split('\n') for line in inputFile]
        print (lines)
    for row in lines:
        for elem in row:
            if elem == "" or elem == 'Ticker':
                continue
            with open("resources/StockData/" + elem + ".csv", "w") as output:
                # output.writelines(elem)
                record = f"Ticker,Date,Open,High,Low,Close,Volume,VolumeWeight,NumberOfTransactions\n" # TODO: first time in, check if stock file exists, if it does
                output.write(record)
                ticker =  elem
                print (ticker)
                get_stock_price(output, stock_key, ticker, time_span, from_, to)
                
                # prevents client error 429
                record_count = record_count + 1
        
                if record_count > 5: 
                    record_count = 1
                    print(f"Wait one minute before retrieving next five stocks.")
                    time.sleep(90) # Sleep for 62 seconds
    
    output.close()
    print("Get_Stock_Price has completed.")
    print("Boooo-yaaaaahhhh!\n")
            
def get_stock_price(output, client_key, ticker, time_span, from_, to):
    
    print(f"Retrieving {ticker} data.") 
    with RESTClient(client_key) as client:
        
        # for parameter information on calling, go to Polygon website
        resp = client.stocks_equities_aggregates(ticker, 1, time_span, from_, to, unadjusted=False)
        
        for result in resp.results:
            if time_span == "minute":
                ms = int(result["t"])
                timestamp_sec = ms/1000
                dt = datetime.datetime.fromtimestamp(timestamp_sec) # access fromtimestamp method directly - you cannot do what you do in 
            else: 
                dt = ts_to_datetime(result["t"])    
            
            record = f"{ticker},{dt},{result['o']},{result['h']},{result['l']},{result['c']},{result['v']}," \
                     f"{result['vw']},{result['n']}\n"
            output.write(record)

# MAIN
if __name__ == '__main__':
    print('Starting PolygonStockAPI')
    # preventing client error 429 
    time.sleep(60) 
    # Access the API giving you stock prices and write to file (soon we'll get these to a table :O)
    AccessPolygon()
    
    # Get SMAs for each stock 
    # use this later: exec(open("source/GetSMA").read())